var fs = require('fs');
var path = require('path');
var common = require('./common');
var log = common.log;

var DB_PATH = '/var/db/dsadm';    
var db = {};

_isUuid = function(obj) {
  var uuidReg = /[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}/;
  if (typeof(obj) === 'string') {
    return (uuidReg.test(obj));
  } 
  return false;
}

validateManifest = function(manifest) {
  var errors = [];
  var requiredFields = [
    'uuid',
    'name',
    'version',
    'description',
    'published_at',
    'type',
    'os',
    'files',
    'creator_uuid',
    'creator_name',
    'urn',
  ];

  var uuidFields = [
    'uuid',
    'creator_uuid',
    'restricted_to_uuid'
  ];

  var validTypes = [
    'zone-dataset',
    'zvol',
  ];
  
  var vmFields = [
    'nic_driver',
    'disk_driver',
    'image_size',
  ];

  _isPresent = function(prop) {
    return (manifest[prop] != undefined) 
  }

  _isPositiveInt = function(prop, val) {
    return (typeof val != 'number' || val < 0)
  } 

  // Required fields
  for (var i=0; i<requiredFields.length; i++) {
    var prop = requiredFields[i];
    if (!_isPresent(prop)) {
      errors.push("missing required " + prop + " field");
    }
  };

  // UUID fields
  for (var i=0; i<uuidFields.length; i++) {
    var prop = uuidFields[i];
    if (requiredFields.indexOf(prop) != -1) {
      if (!_isUuid(manifest[prop])) {
        errors.push(prop + " is not a valid uuid");
      }
    }
  };
 
  // image type
  if (validTypes.indexOf(manifest.type) == -1) {
    errors.push("dataset type must be either one of 'zvol' or 'zone-dataset'");
  }
  
  // Zvol has extra required fields
  if (manifest.type === 'zvol') {
    for (var i=0; i<vmFields.length; i++) {
      var prop = vmFields[i];
      _isPresent(prop);
    }
  } 

  // Platform type
  if (manifest.platform && manifest.platform.type !== "smartos") {
    errors.push("platform type must be 'smartos'");
  }

  // Requirements
  if (manifest.requirements) {
    
    var ramFields = ['min_ram', 'max_ram'];
    for (var i=0; i<ramFields.length; i++) {
      var prop = ramFields[i];
      var val = manifest.requirements[i];
      if (prop) {
        _isPositiveInt(prop, val);
      }
    }
    
  }   

  return (errors.length == 0 ? true : errors); 

}

_dbFile = function(uuid) {
  if (!_isUuid(uuid)) {
    throw new Error("not a valid uuid");
  }
  return DB_PATH + '/' + uuid + '.dsmanifest';
};


_exists = function(uuid, callback) {
  path.exists(_dbFile(uuid), callback); 
}

db.save = function(manifest, callback) {
  var filename = _dbFile(manifest.uuid);
  log.debug("saving %s %s", manifest.uuid, DB_PATH)
  var valid = validateManifest(manifest);
  if (valid != true) {
    return callback(new Error("not a valid manifest: " + valid.join('\n')));
  }

  var contents = JSON.stringify(manifest, null, "  ");
  fs.writeFile(filename, contents, function(err) {
    return callback(err);
  });
}

db.load = function(uuid, callback) {
  var filename = _dbFile(uuid);
  log.debug("loading from %s", uuid);
  path.exists(filename, function(exists) {
    if (exists) {
      fs.readFile(filename, 'utf8', function(err, data) {
        if (err) {
          return callback(err, null) ;
        } 
        else {
          var manifest = JSON.parse(data);  
          callback(err, manifest);
        }
      });
    }
    else {
      callback(new Error("record does not exist"), null);
    }
  });

}

db.all = function(callback) {

  var onRecord = function(err, records) {
    
    var n = records.length;
    var results = [];
    var error;
    
    var cb_n = function(next) {
      return function() {
        --n || next(error, results);
      }
    };

    for (var i=0; i<records.length; i++) {
      var uuid = records[i];
      db.load(uuid, function(err, manifest) {
        error = err
        results.push(manifest);
        cb_n(callback)();
      });
    } 
    
  };
  
  db.list(onRecord);
}

db.list = function(callback) {
  log.debug("listing all manifests from db");
  fs.readdir(DB_PATH, function(err, files) {
    if (err) throw err;      
   
    var results = [];
    for (var i=0; i<files.length; i++) {
      var file = files[i];
      var ext = path.extname(file);
      if (ext === '.dsmanifest') {
        results.push(path.basename(file, '.dsmanifest'));
      } 
    }
    
    log.debug("%o records loaded", results.length);
    return callback(err, results);
  });
}

db.destroy = function(uuid, callback) {
  var filename = _dbFile(uuid);
  _exists(uuid, function(exists) {
    if (exists) {
      fs.unlink(filename, function(err) {
        callback(err);
      });
    } 
    else {
      return callback(new Error("manifest with uuid" + uuid + " does not exist"));
    }
  });

}

module.exports = {
  save: db.save,
  load: db.load,
  list: db.list,
  all: db.all, 
  destroy: db.destroy,
  validateManifest: validateManifest
};

